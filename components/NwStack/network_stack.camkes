/*
 *  OS Network Stack
 *
 *  Copyright (C) 2019, Hensoldt Cyber GmbH
 *
 */

import <if_OS_Nic.camkes>;
import <if_OS_Timer.camkes>;
import <if_OS_Socket.camkes>;
import <if_OS_ConfigService.camkes>;

#include "system_config.h"
#include "util/loop_defines.h"

component NwStack1 {
    control;

    emits       EventDataAvailable  e_tick_or_data;
    consumes    EventDataAvailable  c_tick_or_data; // event also from NIC and Timer

    has         mutex               allocatorMutex;
    has         mutex               nwstackMutex;

    has         mutex               socketControlBlockMutex;
    has         mutex               stackThreadSafeMutex;

#define LOOP_COUNT OS_NETWORK_MAXIMUM_SOCKET_NO
#define LOOP_ELEMENT                       \
    GEN_ID(emits NwStack_WrEv e_write);    \
    GEN_ID(consumes NwStack_WrEv c_write); \
    GEN_ID(emits NwStack_RdEv e_read);     \
    GEN_ID(consumes NwStack_RdEv c_read);  \
    GEN_ID(emits NwStack_ConnEv e_conn);   \
    GEN_ID(consumes NwStack_ConnEv c_conn);
#include "util/loop.h"

    //-------------------------------------------------
    // interface TimeServer
    uses        if_OS_Timer           timeServer_rpc;


    //-------------------------------------------------
    // interface Ethernet NIC driver
    uses if_OS_Nic nic_driver;

    dataport Buf(NIC_DRIVER_RINGBUFFER_SIZE) nic_port_from; // NIC -> stack
    dataport Buf                             nic_port_to;   // stack -> NIC


    //---------------------------------------------------
    // Configuration server
    uses       if_OS_ConfigService  OS_ConfigServiceServer; // name hard-coded in config server client lib
    dataport   Buf                  cfg_dataport_buf;       // name hard-coded in config server client lib
    consumes   EventServiceReady    cfgServer_event_ready;


    //-------------------------------------------------
    // interface Application
    provides if_OS_Socket network_stack_rpc; // name hard-coded in network client lib
    emits EventServiceReady nwStack_event_ready;
#define LOOP_COUNT OS_NETWORK_MAXIMUM_SOCKET_NO
#define LOOP_ELEMENT \
    GEN_ID(dataport Buf nwStack_port);
#include "util/loop.h"

}


component NwStack2 {
    control;

    emits      EventDataAvailable   e_tick_or_data;
    consumes   EventDataAvailable   c_tick_or_data; // event also from NIC and Timer

    has        mutex                allocatorMutex;
    has        mutex                nwstackMutex;

    has        mutex                socketControlBlockMutex;
    has        mutex                stackThreadSafeMutex;

#define LOOP_COUNT OS_NETWORK_MAXIMUM_SOCKET_NO
#define LOOP_ELEMENT                       \
    GEN_ID(emits NwStack_WrEv e_write);    \
    GEN_ID(consumes NwStack_WrEv c_write); \
    GEN_ID(emits NwStack_RdEv e_read);     \
    GEN_ID(consumes NwStack_RdEv c_read);  \
    GEN_ID(emits NwStack_ConnEv e_conn);   \
    GEN_ID(consumes NwStack_ConnEv c_conn);
#include "util/loop.h"

    //-------------------------------------------------
    // interface TimeServer
    uses        if_OS_Timer           timeServer_rpc;


    //-------------------------------------------------
    // interface Ethernet NIC driver
    uses if_OS_Nic nic_driver;

    dataport Buf(NIC_DRIVER_RINGBUFFER_SIZE) nic_port_from; // NIC -> stack
    dataport Buf                             nic_port_to;   // stack -> NIC


    //---------------------------------------------------
    // Configuration server
    uses       if_OS_ConfigService  OS_ConfigServiceServer; // name hard-coded in config server client lib
    dataport   Buf                  cfg_dataport_buf;       // name hard-coded in config server client lib
    consumes   EventServiceReady    cfgServer_event_ready;


    //-------------------------------------------------
    // interface Application
    provides if_OS_Socket network_stack_rpc; // name hard-coded in network client lib
    emits EventServiceReady nwStack_event_ready;
#define LOOP_COUNT OS_NETWORK_MAXIMUM_SOCKET_NO
#define LOOP_ELEMENT \
    GEN_ID(dataport Buf nwStack_port);
#include "util/loop.h"

}
