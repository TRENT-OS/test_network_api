/*
 *  Network API Test System
 *
 *  Copyright (C) 2020-2021, HENSOLDT Cyber GmbH
 */

#include "system_config.h"

#include "TimeServer/camkes/TimeServer.camkes"
TimeServer_COMPONENT_DEFINE(TimeServer)

#include "SysLogger/camkes/SysLogger.camkes"
SysLogger_COMPONENT_DEFINE_NO_SPOOLERS(SysLogger)

import "components/Ticker/Ticker.camkes";
import "components/TestAppClient/test_app_client.camkes";
import "components/TestAppServer/test_app_server.camkes";
import "components/ConfigServer/ConfigServer.camkes";
#include "components/NwStack/network_stack.camkes"

#include "plat_nic.camkes"

#include "util/loop_defines.h"


assembly {
    composition {

        //----------------------------------------------------------------------
        // Ticker
        // It's a very pragmatic approach to create a 1 second tick for each
        // network stack. Actually, we don't need this, because the TimeServer
        // should provide two timers per client, one for timeouts and once for
        // the periodic tick.
        //----------------------------------------------------------------------
        component Ticker ticker;

        //----------------------------------------------------------------------
        // SysLogger
        //----------------------------------------------------------------------
        component   SysLogger       sysLogger;

        SysLogger_INSTANCE_CONNECT_CLIENTS(
            sysLogger,
#if !defined(NETWORK_TEST_ONE_NIC)
            nwStack1,
            nwApp1,
            nwApp1_2,
#endif
            nwStack2,
            nwApp2
        )

        //----------------------------------------------------------------------
        // TimeServer
        //----------------------------------------------------------------------
        component TimeServer timeServer;


        TimeServer_INSTANCE_CONNECT_CLIENTS(
            timeServer,
            ticker.timeServer_rpc, ticker.timeServer_notify,
            // connect platform specific components. The comma needs to be part
            // of the macro expansion
            NETWORK_TEST_OPTIONAL_TIMESERVER_CLIENTS_NETWORK_DRIVER(nwDriver2)
#if !defined(NETWORK_TEST_ONE_NIC)
            nwStack1.timeServer_rpc, nwStack1.timeServer_notify,
#endif
            nwStack2.timeServer_rpc, nwStack2.timeServer_notify
        )

        //----------------------------------------------------------------------
        // ConfigServer
        //----------------------------------------------------------------------
        component ConfigServer configServer;

        //----------------------------------------------------------------------
        // NICs
        //----------------------------------------------------------------------
        NETWORK_TEST_NIC_INSTANCES(nwDriver1, nwDriver2)

#if !defined(NETWORK_TEST_ONE_NIC)

        //----------------------------------------------------------------------
        // Network Stack #1
        //----------------------------------------------------------------------
        component NwStack1 nwStack1;

        NwStack_INSTANCE_CONNECT(
            nwStack1,
            ticker.nwStack1_event_tick,
            nwDriver1
        )

        NETWORK_STACK_CONNECT_CONFIGSERVER(nwStack1, configServer)

        //----------------------------------------------------------------------
        // Network Stack App #1
        //----------------------------------------------------------------------
        component  NwApp1           nwApp1;

        connection seL4RPCCall      nwApp1_nwStack1_rpc(
            from nwApp1.networkStack_rpc,
            to nwStack1.networkStack_rpc);

#define LOOP_COUNT OS_NETWORK_MAXIMUM_SOCKET_NO
#define LOOP_ELEMENT \
        connection seL4SharedData GEN_NAME(nwApp1, nwStack1)( \
            from nwApp1.GEN_PORT(socket_), \
            to nwStack1.GEN_PORT(socket_));
/* insert LOOP_ELEMENT for LOOP_COUNT times */
#include "util/loop.h"


        //----------------------------------------------------------------------
        // Network Stack App #1.2
        //----------------------------------------------------------------------
        component NwApp1 nwApp1_2;

        connection seL4RPCCall nwApp1_2_nwStack1_rpc(
            from nwApp1_2.networkStack_rpc,
            to nwStack1.networkStack_rpc);

#define LOOP_COUNT OS_NETWORK_MAXIMUM_SOCKET_NO
#define LOOP_ELEMENT \
        connection seL4SharedData GEN_NAME(nwApp1_2, nwStack1)( \
            from nwApp1_2.GEN_PORT(socket_), \
            to nwStack1.GEN_PORT(socket_));
/* insert LOOP_ELEMENT for LOOP_COUNT times */
#include "util/loop.h"


        // Clients sync
        connection seL4Notification nwApp1_nwApp_1_2_ready(
            from nwApp1.event_network_app_send_ready,
            to nwApp1_2.event_network_app_recv_ready);

        connection seL4Notification nwApp1_2_nwApp_1_ready(
            from nwApp1_2.event_network_app_send_ready,
            to nwApp1.event_network_app_recv_ready);


#endif // !defined(NETWORK_TEST_ONE_NIC)


        //----------------------------------------------------------------------
        // Network Stack #2
        //----------------------------------------------------------------------
        component NwStack2 nwStack2;

        NwStack_INSTANCE_CONNECT(
            nwStack2,
            ticker.nwStack2_event_tick,
            nwDriver2
        )

        NETWORK_STACK_CONNECT_CONFIGSERVER(nwStack2, configServer)


        //----------------------------------------------------------------------
        // Network Stack App #2
        //----------------------------------------------------------------------
        component NwApp2 nwApp2;

        connection seL4RPCCall      nwApp2_nwStack2_rpc(
            from nwApp2.networkStack_rpc,
            to nwStack2.networkStack_rpc);

#define LOOP_COUNT OS_NETWORK_MAXIMUM_SOCKET_NO
#define LOOP_ELEMENT \
        connection seL4SharedData GEN_NAME(nwApp2, nwStack2)( \
            from nwApp2.GEN_PORT(socket_), \
            to nwStack2.GEN_PORT(socket_));
/* insert LOOP_ELEMENT for LOOP_COUNT times */
#include "util/loop.h"

     }

    configuration {
        TimeServer_CLIENT_ASSIGN_BADGES(
            ticker.timeServer_rpc,
            // connect platform specific components. The comma needs to be part
            // of the macro expansion
            NETWORK_TEST_OPTIONAL_TIMESERVER_CLIENTS_NETWORK_DRIVER_BADGES(nwDriver2)
            nwStack1.timeServer_rpc,
            nwStack2.timeServer_rpc
        )

        NETWORK_TEST_NIC_CONFIG(nwDriver1, nwDriver2)
    }
}
