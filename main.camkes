import <std_connector.camkes>;

import "components/Ticker/Ticker.camkes";
import "components/NwStack/network_stack.camkes";
import "components/TestAppClient/test_app_client.camkes";
import "components/TestAppServer/test_app_server.camkes";
import "components/ConfigServer/ConfigServer.camkes";

#include "system_config.h"

#include "TimeServer/camkes/TimeServer.camkes"
TimeServer_COMPONENT_DEFINE(TimeServer)

#include "ChanMux/ChanMux_UART.camkes"
ChanMux_UART_COMPONENT_DEFINE(
    ChanMux_UART,
    nwDriver1, ctrl,
    nwDriver1, data,
    nwDriver2, ctrl,
    nwDriver2, data
)

#include "NIC_ChanMux/NIC_ChanMux.camkes"
NIC_ChanMux_COMPONENT_DEFINE(NwDriver1, NIC_DRIVER_RINGBUFFER_SIZE)
NIC_ChanMux_COMPONENT_DEFINE(NwDriver2, NIC_DRIVER_RINGBUFFER_SIZE)

#include "util/loop_defines.h"
#include "system_config.h"

assembly {
    composition {

        //----------------------------------------------------------------------
        // ChanMux + UART
        //----------------------------------------------------------------------
        component ChanMux_UART chanMux_UART;
        component UART_CHANMUX uart;

        ChanMux_UART_INSTANCE_CONNECT(
                chanMux_UART,
                uart
        )

        //----------------------------------------------------------------------
        // ConfigServer
        //----------------------------------------------------------------------
        component   ConfigServer     configServer;


        //----------------------------------------------------------------------
        // Network Driver #1
        //----------------------------------------------------------------------
        component  NwDriver1        nwDriver1;

        ChanMux_INSTANCE_CONNECT_CLIENTS(
            chanMux_UART,
            nwDriver1, data, ctrl
        )

        //----------------------------------------------------------------------
        // Network Stack #1
        //----------------------------------------------------------------------
        component  NwStack1               nwStack1;

        connection seL4NotificationNative nwStack1_internal_hasData      (from nwStack1.e_tick_or_data,         to nwStack1.c_tick_or_data);
#define COMPONENT nwStack1
#define LOOP_COUNT OS_NETWORK_MAXIMUM_SOCKET_NO
#define LOOP_ELEMENT \
        connection seL4Notification GEN_NAME(COMPONENT, _a)(from COMPONENT.GEN_ID(e_write), to COMPONENT.GEN_ID(c_write)); \
        connection seL4Notification GEN_NAME(COMPONENT, _b)(from COMPONENT.GEN_ID(e_read), to COMPONENT.GEN_ID(c_read));   \
        connection seL4Notification GEN_NAME(COMPONENT, _c)(from COMPONENT.GEN_ID(e_conn), to COMPONENT.GEN_ID(c_conn));
#include "util/loop.h"
#undef COMPONENT

        connection seL4Notification       nwStack1_configServer_ready    (from configServer.event_ready,        to nwStack1.cfgServer_event_ready);
        connection seL4RPCCall            nwStack1_configServer_rpc      (from nwStack1.OS_ConfigServiceServer, to configServer.OS_ConfigServiceServer);
        connection seL4SharedData         nwStack1_configServer_data     (from nwStack1.cfg_dataport_buf,       to configServer.cfg_dataport_buf);

        NIC_ChanMux_INSTANCE_CONNECT_CLIENT(
            nwDriver1,
            nwStack1.nic_driver, nwStack1.nic_port_to, nwStack1.nic_port_from, nwStack1.c_tick_or_data
        )

        //----------------------------------------------------------------------
        // Network Stack App #1
        //----------------------------------------------------------------------
        component  NwApp1           nwApp1;

        connection seL4Notification nwApp1_nwStack1_initDone (from nwStack1.nwStack_event_ready, to nwApp1.event_network_stack_init_done);
        connection seL4RPCCall      nwApp1_nwStack1_rpc      (from nwApp1.network_stack_rpc,     to nwStack1.network_stack_rpc);

#define LOOP_COUNT OS_NETWORK_MAXIMUM_SOCKET_NO
#define LOOP_ELEMENT \
        connection seL4SharedData GEN_NAME(nwApp1, nwStack1)(from nwApp1.GEN_ID(NwAppDataPort), to nwStack1.GEN_ID(nwStack_port));
#include "util/loop.h"

        //----------------------------------------------------------------------
        // Network Stack App #1.2
        //----------------------------------------------------------------------
        component NwApp1 nwApp1_2;

        connection seL4Notification nwApp1_2_nwStack1_initDone(from nwStack1.nwStack_event_ready, to nwApp1_2.event_network_stack_init_done);
        connection seL4RPCCall nwApp1_2_nwStack1_rpc(from nwApp1_2.network_stack_rpc, to nwStack1.network_stack_rpc);

#define LOOP_COUNT OS_NETWORK_MAXIMUM_SOCKET_NO
#define LOOP_ELEMENT \
        connection seL4SharedData GEN_NAME(nwApp1_2, nwStack1)(from nwApp1_2.GEN_ID(NwAppDataPort), to nwStack1.GEN_ID(nwStack_port));
#include "util/loop.h"

        //----------------------------------------------------------------------
        // Network Driver #2
        //----------------------------------------------------------------------
        component  NwDriver2        nwDriver2;

        ChanMux_INSTANCE_CONNECT_CLIENTS(
            chanMux_UART,
            nwDriver2, data, ctrl
        )

        //----------------------------------------------------------------------
        // Network Stack #2
        //----------------------------------------------------------------------
        component  NwStack2               nwStack2;

        connection seL4NotificationNative nwStack2_internal_hasData        (from nwStack2.e_tick_or_data,         to nwStack2.c_tick_or_data);

#define COMPONENT nwStack2
#define LOOP_COUNT OS_NETWORK_MAXIMUM_SOCKET_NO

#define LOOP_ELEMENT \
        connection seL4Notification GEN_NAME(COMPONENT, _a)(from COMPONENT.GEN_ID(e_write), to COMPONENT.GEN_ID(c_write)); \
        connection seL4Notification GEN_NAME(COMPONENT, _b)(from COMPONENT.GEN_ID(e_read), to COMPONENT.GEN_ID(c_read));   \
        connection seL4Notification GEN_NAME(COMPONENT, _c)(from COMPONENT.GEN_ID(e_conn), to COMPONENT.GEN_ID(c_conn));
#include "util/loop.h"
#undef COMPONENT

        connection seL4Notification       nwStack2_configServer_ready       (from configServer.event_ready,         to nwStack2.cfgServer_event_ready);
        connection seL4RPCCall            nwStack2_configServer_rpc         (from nwStack2.OS_ConfigServiceServer,  to configServer.OS_ConfigServiceServer);
        connection seL4SharedData         nwStack2_configServer_data        (from nwStack2.cfg_dataport_buf,        to configServer.cfg_dataport_buf);

        NIC_ChanMux_INSTANCE_CONNECT_CLIENT(
            nwDriver2,
            nwStack2.nic_driver,  nwStack2.nic_port_to, nwStack2.nic_port_from, nwStack2.c_tick_or_data
        )

        //----------------------------------------------------------------------
        // Network Stack App #2
        //----------------------------------------------------------------------
        component  NwApp2          nwApp2;

        connection seL4Notification nwApp2_nwStack2_initDone (from nwStack2.nwStack_event_ready, to nwApp2.event_network_stack_init_done);
        connection seL4RPCCall      nwApp2_nwStack2_rpc      (from nwApp2.network_stack_rpc,     to nwStack2.network_stack_rpc);

#define LOOP_COUNT OS_NETWORK_MAXIMUM_SOCKET_NO
#define LOOP_ELEMENT \
        connection seL4SharedData GEN_NAME(nwApp2, nwStack2)(from nwApp2.GEN_ID(NwAppDataPort), to nwStack2.GEN_ID(nwStack_port));
#include "util/loop.h"


        //----------------------------------------------------------------------
        // Ticker
        // It's a very pragmatic approach to create a 1 second tick for each
        // network stack. Actually, we don't need this, because the TimeServer
        // should provide two timers per client, one for timeouts and once for
        // the periodic tick.
        //----------------------------------------------------------------------
        component Ticker ticker;
        connection seL4NotificationNative nwStack1_tick (from ticker.nwStack1_event_tick, to nwStack1.c_tick_or_data);
        connection seL4NotificationNative nwStack2_tick (from ticker.nwStack2_event_tick, to nwStack2.c_tick_or_data);

        //----------------------------------------------------------------------
        // TimeServer
        //----------------------------------------------------------------------
        component TimeServer timeServer;

        TimeServer_INSTANCE_CONNECT_CLIENTS(
            timeServer,
            ticker.timeServer_rpc, ticker.timeServer_notify,
            nwStack1.timeServer_rpc, nwStack1.timeServer_notify,
            nwStack2.timeServer_rpc, nwStack2.timeServer_notify
        )


     }

    configuration {
        TimeServer_CLIENT_ASSIGN_BADGES(
            ticker.timeServer_rpc,
            nwStack1.timeServer_rpc,
            nwStack2.timeServer_rpc
        )
        ChanMux_UART_CLIENT_ASSIGN_BADGES(
            nwDriver1.chanMux_Rpc,
            nwDriver2.chanMux_Rpc
        )
    }
}
