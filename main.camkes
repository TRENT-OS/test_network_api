/*
 *  Network API Test System
 *
 *  Copyright (C) 2020, Hensoldt Cyber GmbH
 */

import "components/Ticker/Ticker.camkes";
import "components/NwStack/network_stack.camkes";
import "components/TestAppClient/test_app_client.camkes";
import "components/TestAppServer/test_app_server.camkes";
import "components/ConfigServer/ConfigServer.camkes";

#include "system_config.h"

#include "TimeServer/camkes/TimeServer.camkes"
TimeServer_COMPONENT_DEFINE(TimeServer)

#include "plat_nic.camkes"

#include "util/loop_defines.h"

assembly {
    composition {

        //----------------------------------------------------------------------
        // NICs
        //----------------------------------------------------------------------
        NETWORK_TEST_NIC_INSTANCES(nwDriver1, nwDriver2)


        //----------------------------------------------------------------------
        // ConfigServer
        //----------------------------------------------------------------------
        component ConfigServer configServer;


#ifndef NETWORK_TEST_ONE_NIC


        //----------------------------------------------------------------------
        // Network Stack #1
        //----------------------------------------------------------------------
        component NwStack1 nwStack1;
        NETWORK_TEST_NIC_CONNECT(nwDriver1, nwStack1)

        connection seL4NotificationNative nwStack1_internal_hasData(
            from nwStack1.e_tick_or_data,
            to nwStack1.c_tick_or_data);

#define LOOP_COUNT OS_NETWORK_MAXIMUM_SOCKET_NO
#define LOOP_ELEMENT \
        connection seL4Notification GEN_NAME(nwStack1, _a)( \
            from nwStack1.GEN_ID(e_write), \
            to nwStack1.GEN_ID(c_write)); \
        connection seL4Notification GEN_NAME(nwStack1, _b)( \
            from nwStack1.GEN_ID(e_read), \
            to nwStack1.GEN_ID(c_read));   \
        connection seL4Notification GEN_NAME(nwStack1, _c)( \
            from nwStack1.GEN_ID(e_conn), \
            to nwStack1.GEN_ID(c_conn));
/* insert LOOP_ELEMENT for LOOP_COUNT times */
#include "util/loop.h"


        connection seL4Notification nwStack1_configServer_ready(
            from configServer.event_ready,
            to nwStack1.cfgServer_event_ready);

        connection seL4RPCCall nwStack1_configServer_rpc(
            from nwStack1.OS_ConfigServiceServer,
            to configServer.OS_ConfigServiceServer);

        connection seL4SharedData nwStack1_configServer_data(
            from nwStack1.cfg_dataport_buf,
            to configServer.cfg_dataport_buf);


        //----------------------------------------------------------------------
        // Network Stack App #1
        //----------------------------------------------------------------------
        component  NwApp1           nwApp1;

        connection seL4Notification nwApp1_nwStack1_initDone(
            from nwStack1.nwStack_event_ready,
            to nwApp1.event_network_stack_init_done);

        connection seL4RPCCall      nwApp1_nwStack1_rpc(
            from nwApp1.network_stack_rpc,
            to nwStack1.network_stack_rpc);

#define LOOP_COUNT OS_NETWORK_MAXIMUM_SOCKET_NO
#define LOOP_ELEMENT \
        connection seL4SharedData GEN_NAME(nwApp1, nwStack1)( \
            from nwApp1.GEN_ID(NwAppDataPort), \
            to nwStack1.GEN_ID(nwStack_port));
/* insert LOOP_ELEMENT for LOOP_COUNT times */
#include "util/loop.h"


        //----------------------------------------------------------------------
        // Network Stack App #1.2
        //----------------------------------------------------------------------
        component NwApp1 nwApp1_2;

        connection seL4Notification nwApp1_2_nwStack1_initDone(
            from nwStack1.nwStack_event_ready,
            to nwApp1_2.event_network_stack_init_done);

        connection seL4RPCCall nwApp1_2_nwStack1_rpc(
            from nwApp1_2.network_stack_rpc,
            to nwStack1.network_stack_rpc);

#define LOOP_COUNT OS_NETWORK_MAXIMUM_SOCKET_NO
#define LOOP_ELEMENT \
        connection seL4SharedData GEN_NAME(nwApp1_2, nwStack1)( \
            from nwApp1_2.GEN_ID(NwAppDataPort), \
            to nwStack1.GEN_ID(nwStack_port));
/* insert LOOP_ELEMENT for LOOP_COUNT times */
#include "util/loop.h"


#endif // not defined NETWORK_TEST_ONE_NIC


        //----------------------------------------------------------------------
        // Network Stack #2
        //----------------------------------------------------------------------
        component NwStack2 nwStack2;
        NETWORK_TEST_NIC_CONNECT(nwDriver2, nwStack2)

        connection seL4NotificationNative nwStack2_internal_hasData(
            from nwStack2.e_tick_or_data,
            to nwStack2.c_tick_or_data);

#define LOOP_COUNT OS_NETWORK_MAXIMUM_SOCKET_NO
#define LOOP_ELEMENT \
        connection seL4Notification GEN_NAME(nwStack2, _a)( \
            from nwStack2.GEN_ID(e_write), \
            to nwStack2.GEN_ID(c_write)); \
        connection seL4Notification GEN_NAME(nwStack2, _b)( \
            from nwStack2.GEN_ID(e_read), \
            to nwStack2.GEN_ID(c_read));   \
        connection seL4Notification GEN_NAME(nwStack2, _c)( \
            from nwStack2.GEN_ID(e_conn), \
            to nwStack2.GEN_ID(c_conn));
/* insert LOOP_ELEMENT for LOOP_COUNT times */
#include "util/loop.h"

        connection seL4Notification nwStack2_configServer_ready(
            from configServer.event_ready,
            to nwStack2.cfgServer_event_ready);

        connection seL4RPCCall nwStack2_configServer_rpc(
            from nwStack2.OS_ConfigServiceServer,
            to configServer.OS_ConfigServiceServer);

        connection seL4SharedData nwStack2_configServer_data(
            from nwStack2.cfg_dataport_buf,
            to configServer.cfg_dataport_buf);


        //----------------------------------------------------------------------
        // Network Stack App #2
        //----------------------------------------------------------------------
        component NwApp2 nwApp2;

        connection seL4Notification nwApp2_nwStack2_initDone(
            from nwStack2.nwStack_event_ready,
            to nwApp2.event_network_stack_init_done);

        connection seL4RPCCall      nwApp2_nwStack2_rpc(
            from nwApp2.network_stack_rpc,
            to nwStack2.network_stack_rpc);

#define LOOP_COUNT OS_NETWORK_MAXIMUM_SOCKET_NO
#define LOOP_ELEMENT \
        connection seL4SharedData GEN_NAME(nwApp2, nwStack2)( \
            from nwApp2.GEN_ID(NwAppDataPort), \
            to nwStack2.GEN_ID(nwStack_port));
/* insert LOOP_ELEMENT for LOOP_COUNT times */
#include "util/loop.h"


        //----------------------------------------------------------------------
        // Ticker
        // It's a very pragmatic approach to create a 1 second tick for each
        // network stack. Actually, we don't need this, because the TimeServer
        // should provide two timers per client, one for timeouts and once for
        // the periodic tick.
        //----------------------------------------------------------------------
        component Ticker ticker;

#ifndef NETWORK_TEST_ONE_NIC
        connection seL4NotificationNative nwStack1_tick(
            from ticker.nwStack1_event_tick,
            to nwStack1.c_tick_or_data);
#endif

        connection seL4NotificationNative nwStack2_tick(
            from ticker.nwStack2_event_tick,
            to nwStack2.c_tick_or_data);


        //----------------------------------------------------------------------
        // TimeServer
        //----------------------------------------------------------------------
        component TimeServer timeServer;

        TimeServer_INSTANCE_CONNECT_CLIENTS(
            timeServer,
            ticker.timeServer_rpc, ticker.timeServer_notify,
#ifndef NETWORK_TEST_ONE_NIC
            nwStack1.timeServer_rpc, nwStack1.timeServer_notify,
#endif
            nwStack2.timeServer_rpc, nwStack2.timeServer_notify
        )
     }

    configuration {
        TimeServer_CLIENT_ASSIGN_BADGES(
            ticker.timeServer_rpc,
            nwStack1.timeServer_rpc,
            nwStack2.timeServer_rpc
        )

        NETWORK_TEST_NIC_CONFIG(nwDriver1, nwDriver2)
    }
}
