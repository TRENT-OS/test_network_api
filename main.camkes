import <std_connector.camkes>;

import "components/NwStack/network_stack.camkes";
import "components/TestAppClient/test_app_client.camkes";
import "components/TestAppServer/test_app_server.camkes";
import "components/TimerClient/timer_client.camkes";
import "components/Timer/timer.camkes";
import "components/Uart/Uart.camkes";
import "components/ConfigServer/ConfigServer.camkes";

#include "system_config.h"

#include "NIC_ChanMux/NIC_ChanMux.camkes"
DECLARE_COMPONENT_NIC_ChanMux(NwDriver_1)
DECLARE_COMPONENT_NIC_ChanMux(NwDriver_2)

#define CHANMUX_COMPONENT_NAME  ChanMux
#define CHANMUX_UPPER_INTERFACES "components/ChanMux/ChanMux_upper_interface.camkes"
#include "ChanMux/ChanMux.camkes"


assembly {
    composition {

        //----------------------------------------------------------------------
        // UART
        //----------------------------------------------------------------------
        component  UartDev          uartDev;
        component  UartDrv          uartDrv;

        connection seL4HardwareMMIO uart_memio          (from uartDrv.uartRegBase,    to uartDev.uartRegBase);

        //----------------------------------------------------------------------
        // MUX
        //----------------------------------------------------------------------
        DECLARE_AND_CONNECT_INSTANCE_CHANMUX(
            ChanMux, chanMux,
            uartDrv.UartDrv, uartDrv.inputDataPort,
            uartDrv.Output)

        //----------------------------------------------------------------------
        // Timer
        //----------------------------------------------------------------------
        component  Timerbase             timerbase;
        component  Timer                 timer;
        connection seL4HardwareMMIO      timer_mem            (from timer.reg,         to timerbase.reg);
        connection seL4HardwareInterrupt timer_irq            (from timerbase.irq,     to timer.irq);

        component  TimerClient           timerclient;
        connection seL4RPCCall           timerclient_timer    (from timerclient.Timer, to timer.Timer);


        //----------------------------------------------------------------------
        // ConfigServer
        //----------------------------------------------------------------------
        component   ConfigServer     configServer;


        //----------------------------------------------------------------------
        // Network Driver #1
        //----------------------------------------------------------------------
        component  NwDriver_1       nwDriver_1;

        connection seL4Notification NwDriver_1_chanmux_dataAvail       (from chanMux.nic_1_event_hasData,        to nwDriver_1.chanMux_event_hasData);
        connection seL4RPCCall      nwDriver_1_chanmux_rpc             (from nwDriver_1.chanMux_rpc,             to chanMux.chanMux_rpc);
        connection seL4SharedData   NwDriver_1_chanmux_port_ctrl       (from nwDriver_1.chanMux_port_ctrl,       to chanMux.nic_1_port_ctrl);
        connection seL4SharedData   NwDriver_1_chanmux_port_data_read  (from nwDriver_1.chanMux_port_data_read,  to chanMux.nic_1_port_data_read);
        connection seL4SharedData   NwDriver_1_chanmux_port_data_write (from nwDriver_1.chanMux_port_data_write, to chanMux.nic_1_port_data_write);


        //----------------------------------------------------------------------
        // Network Stack #1
        //----------------------------------------------------------------------
        component  NwStack_1              nwStack_1;

        connection seL4NotificationNative nwStack_1_internal_hasData      (from nwStack_1.e_tick_or_data,         to nwStack_1.c_tick_or_data);
        connection seL4Notification       nwStack_1_internal_conn         (from nwStack_1.e_conn,                 to nwStack_1.c_conn);
        connection seL4Notification       nwStack_1_internal_read         (from nwStack_1.e_read,                 to nwStack_1.c_read);
        connection seL4Notification       nwStack_1_internal_write        (from nwStack_1.e_write,                to nwStack_1.c_write);

        connection seL4Notification       nwStack_1_configServer_ready    (from configServer.event_ready,         to nwStack_1.cfgServer_event_ready);
        connection seL4RPCCall            NwStack_1_configServer_rpc      (from nwStack_1.OS_ConfigServiceServer, to configServer.OS_ConfigServiceServer);
        connection seL4SharedData         NwStack_1_configServer_data     (from nwStack_1.cfg_dataport_buf,       to configServer.cfg_dataport_buf);

        connection seL4RPCCall            nwStack_1_timer_rpc             (from nwStack_1.Timer,                  to timerclient.TimerClient);
        connection seL4NotificationNative nwStack_1_timer_hasData         (from timerclient.nwStack_1_event_tick, to nwStack_1.c_tick_or_data);

        connection seL4RPCCall            nwStack_1_nwDriver_1_rpc        (from nwStack_1.nic_driver,             to nwDriver_1.nic_rpc);
        connection seL4SharedData         nwStack_1_nwDriver_1_port_read  (from nwDriver_1.nic_port_to,           to nwStack_1.nic_port_from);
        connection seL4SharedData         nwStack_1_nwDriver_1_port_write (from nwDriver_1.nic_port_from,         to nwStack_1.nic_port_to);
        connection seL4NotificationNative nwStack_1_nwDriver_1_hasData    (from nwDriver_1.nic_event_hasData,     to nwStack_1.c_tick_or_data);

        //----------------------------------------------------------------------
        // Network Stack App #1
        //----------------------------------------------------------------------
        component  NwApp_1          nwApp_1;

        connection seL4Notification nwApp_1_nwStack_1_initDone (from nwStack_1.nwStack_event_ready, to nwApp_1.event_network_stack_init_done);
        connection seL4RPCCall      nwApp_1_nwStack_1_rpc      (from nwApp_1.network_stack_rpc,     to nwStack_1.network_stack_rpc);
        connection seL4SharedData   nwApp_1_nwStack_1_port     (from nwApp_1.NwAppDataPort,         to nwStack_1.nwStack_port);


        //----------------------------------------------------------------------
        // Network Driver #2
        //----------------------------------------------------------------------
        component  NwDriver_2       nwDriver_2;

        connection seL4Notification nwDriver_2_chanmux_hasData         (from chanMux.nic_2_event_hasData,        to nwDriver_2.chanMux_event_hasData);
        connection seL4RPCCall      nwDriver_2_chanmux_rpc             (from nwDriver_2.chanMux_rpc,             to chanMux.chanMux_rpc);
        connection seL4SharedData   nwDriver_2_chanmux_port_ctrl       (from nwDriver_2.chanMux_port_ctrl,       to chanMux.nic_2_port_ctrl);
        connection seL4SharedData   nwDriver_2_chanmux_port_data_read  (from nwDriver_2.chanMux_port_data_read,  to chanMux.nic_2_port_data_read);
        connection seL4SharedData   nwDriver_2_chanmux_port_data_write (from nwDriver_2.chanMux_port_data_write, to chanMux.nic_2_port_data_write);


        //----------------------------------------------------------------------
        // Network Stack #2
        //----------------------------------------------------------------------
        component  NwStack_2              nwStack_2;

        connection seL4NotificationNative nwStack_2_internal_hasData        (from nwStack_2.e_tick_or_data,         to nwStack_2.c_tick_or_data);
        connection seL4Notification       nwStack_2_internal_conn           (from nwStack_2.e_conn,                 to nwStack_2.c_conn);
        connection seL4Notification       nwStack_2_internal_read           (from nwStack_2.e_read,                 to nwStack_2.c_read);
        connection seL4Notification       nwStack_2_internal_write          (from nwStack_2.e_write,                to nwStack_2.c_write);

        connection seL4Notification       nwStack_2_configServer_ready      (from configServer.event_ready,         to nwStack_2.cfgServer_event_ready);
        connection seL4RPCCall            NwStack_2_configServer_rpc        (from nwStack_2.OS_ConfigServiceServer, to configServer.OS_ConfigServiceServer);
        connection seL4SharedData         NwStack_2_configServer_data       (from nwStack_2.cfg_dataport_buf,       to configServer.cfg_dataport_buf);

        connection seL4RPCCall            nwStack_2_timer_rpc               (from nwStack_2.Timer,                  to timerclient.TimerClient);
        connection seL4NotificationNative nwStack_2_timer_hasData           (from timerclient.nwStack_2_event_tick, to nwStack_2.c_tick_or_data);

        connection seL4RPCCall            nwStack_2_nwDriver_2_rpc          (from nwStack_2.nic_driver,             to nwDriver_2.nic_rpc);
        connection seL4SharedData         nwStack_2_nwDriver_2_port_read    (from nwDriver_2.nic_port_to,           to nwStack_2.nic_port_from);
        connection seL4SharedData         nwStack_2_nwDriver_2_port_write   (from nwDriver_2.nic_port_from,         to nwStack_2.nic_port_to);
        connection seL4NotificationNative nwStack_2_nwDriver_2_hasData      (from nwDriver_2.nic_event_hasData,     to nwStack_2.c_tick_or_data);

        //----------------------------------------------------------------------
        // Network Stack App #2
        //----------------------------------------------------------------------
        component  NwApp_2          nwApp_2;

        connection seL4Notification nwApp_2_nwStack_2_initDone (from nwStack_2.nwStack_event_ready, to nwApp_2.event_network_stack_init_done);
        connection seL4RPCCall      nwApp_2_nwStack_2_rpc      (from nwApp_2.network_stack_rpc,     to nwStack_2.network_stack_rpc);
        connection seL4SharedData   nwApp_2_nwStack_2_port     (from nwApp_2.NwAppDataPort,         to nwStack_2.nwStack_port);
    }

    configuration {
        uartDev.uartRegBase_paddr = 0xE0000000;
        uartDev.uartRegBase_size  = 0x1000;
        uartDrv.inputDataPort     = "R";

        timerbase.reg_paddr      = 0xF8001000;   // paddr of mmio registers
        timerbase.reg_size       = 0x1000;        // size of mmio registers
        timerbase.irq_irq_number = 42;      // timer irq number

        /* assign an initial value to semaphore */
        timer.sem_value = 0;

        // assign endpoint badges for n:1 RPC interface of ChanMUX. The generic
        // naming scheme is <component>.<interface>_attributes = <badge ID>
        nwDriver_1.chanMux_rpc_attributes = CHANMUX_ID_NIC_1;
        nwDriver_2.chanMux_rpc_attributes = CHANMUX_ID_NIC_2;
    }
}
